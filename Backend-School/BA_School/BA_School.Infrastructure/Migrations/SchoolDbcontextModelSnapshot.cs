// <auto-generated />
using System;
using BA_School.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BA_School.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolDbcontext))]
    partial class SchoolDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BA_School.Domain.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 30,
                            GradeId = 1,
                            Name = "Class A",
                            SupervisorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 25,
                            GradeId = 2,
                            Name = "Class B",
                            SupervisorId = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 20,
                            GradeId = 3,
                            Name = "Class C",
                            SupervisorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 35,
                            GradeId = 4,
                            Name = "Class D",
                            SupervisorId = 2
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            Description = "Annual Math Contest",
                            EndTime = new DateTime(2024, 12, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 12, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Math Contest"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 2,
                            Description = "Annual Science Fair",
                            EndTime = new DateTime(2024, 12, 22, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 12, 22, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Science Fair"
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = 1
                        },
                        new
                        {
                            Id = 2,
                            Level = 2
                        },
                        new
                        {
                            Id = 3,
                            Level = 3
                        },
                        new
                        {
                            Id = 4,
                            Level = 4
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 1,
                            Day = "12/7/2024 9:24:49 PM",
                            EndTime = new DateTime(2024, 12, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Math Lesson 1",
                            StartTime = new DateTime(2024, 12, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 2,
                            Day = "12/7/2024 9:24:49 PM",
                            EndTime = new DateTime(2024, 12, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Science Lesson 1",
                            StartTime = new DateTime(2024, 12, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = 2,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            Name = "Parent One",
                            Phone = "123456789",
                            Surname = "Doe",
                            Username = "parent1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            Name = "Parent Two",
                            Phone = "987654321",
                            Surname = "Smith",
                            Username = "parent2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            Name = "Parent Three",
                            Phone = "111222333",
                            Surname = "Wilson",
                            Username = "parent3"
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("GradeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            Birthday = new DateTime(2005, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "O",
                            ClassId = 1,
                            CreatedAt = new DateTime(2024, 12, 7, 21, 24, 49, 418, DateTimeKind.Local).AddTicks(5776),
                            Email = "john.doe@example.com",
                            GradeId = 1,
                            Name = "John",
                            ParentId = 1,
                            Phone = "123456789",
                            Sex = "MALE",
                            Surname = "Doe",
                            Username = "student1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            Birthday = new DateTime(2006, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "A",
                            ClassId = 2,
                            CreatedAt = new DateTime(2024, 12, 7, 21, 24, 49, 418, DateTimeKind.Local).AddTicks(5800),
                            Email = "jane.smith@example.com",
                            GradeId = 2,
                            Name = "Jane",
                            ParentId = 2,
                            Phone = "987654321",
                            Sex = "FEMALE",
                            Surname = "Smith",
                            Username = "student2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St",
                            Birthday = new DateTime(2007, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "B",
                            ClassId = 3,
                            CreatedAt = new DateTime(2024, 12, 7, 21, 24, 49, 418, DateTimeKind.Local).AddTicks(5804),
                            Email = "sam.wilson@example.com",
                            GradeId = 3,
                            Name = "Sam",
                            ParentId = 3,
                            Phone = "111222333",
                            Sex = "MALE",
                            Surname = "Wilson",
                            Username = "student3"
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Name = "History"
                        },
                        new
                        {
                            Id = 4,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "10 Maple Ave",
                            Birthday = new DateTime(1985, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "AB",
                            CreatedAt = new DateTime(2024, 12, 7, 21, 24, 49, 418, DateTimeKind.Local).AddTicks(5928),
                            Email = "alice.brown@example.com",
                            Name = "Alice",
                            Phone = "1122334455",
                            Sex = "FEMALE",
                            Surname = "Brown",
                            Username = "teacher1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "20 Birch Lane",
                            Birthday = new DateTime(1980, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = "O",
                            CreatedAt = new DateTime(2024, 12, 7, 21, 24, 49, 418, DateTimeKind.Local).AddTicks(5932),
                            Email = "bob.johnson@example.com",
                            Name = "Bob",
                            Phone = "2233445566",
                            Sex = "MALE",
                            Surname = "Johnson",
                            Username = "teacher2"
                        });
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("SubjectsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("SubjectTeacher");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Announcement", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Class", "Class")
                        .WithMany("Announcements")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Assignment", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Assignments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Attendances")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Class", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Teacher", "Supervisor")
                        .WithMany("Classes")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Event", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Class", "Class")
                        .WithMany("Events")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Exam", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Exams")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Result", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Assignment", "Assignment")
                        .WithMany("Results")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("BA_School.Domain.Entities.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamId");

                    b.HasOne("BA_School.Domain.Entities.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Student", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Grade");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SubjectTeacher", b =>
                {
                    b.HasOne("BA_School.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BA_School.Domain.Entities.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Assignment", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Class", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Events");

                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Exam", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attendances");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("BA_School.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
